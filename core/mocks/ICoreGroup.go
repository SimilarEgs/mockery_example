// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/SimilarEgs/mockery_example/core"

	mock "github.com/stretchr/testify/mock"
)

// ICoreGroup is an autogenerated mock type for the ICoreGroup type
type ICoreGroup struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *ICoreGroup) Create(_a0 context.Context, _a1 core.GroupCreateRequest) (*core.GroupCreateResult, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.GroupCreateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.GroupCreateRequest) (*core.GroupCreateResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.GroupCreateRequest) *core.GroupCreateResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.GroupCreateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.GroupCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *ICoreGroup) Get(_a0 context.Context, _a1 core.GroupGetRequest) (*core.GroupGetResult, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *core.GroupGetResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.GroupGetRequest) (*core.GroupGetResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.GroupGetRequest) *core.GroupGetResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.GroupGetResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.GroupGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICoreGroup creates a new instance of ICoreGroup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICoreGroup(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICoreGroup {
	mock := &ICoreGroup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
